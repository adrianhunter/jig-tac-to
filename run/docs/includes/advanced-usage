<h1 id='advanced-usage'>Advanced Usage</h1><h2 id='advanced-usage-debugging-tips'>Debugging Tips</h2>
<p>Sometimes you will be faced with errors you don&#39;t understand. Don&#39;t fret! Here are some tips:</p>

<ul>
<li>Grab the latest Run SDK from <a href="https://www.runonbitcoin.com">runonbitcoin.com</a></li>
<li>Redeploy any jigs from older versions of Run</li>
<li>Use Node 8+ or a modern web browser like Chrome, Firefox, Edge, or Safari</li>
<li>Use the mockchain to check that it is not a connection or server-side error</li>
<li>Enable Run&#39;s internal logs by passing <code>{ logger: console }</code> into <code>Run</code></li>
<li>Disable Run&#39;s sandboxing by passing <code>{ sandbox: false }</code> into <code>Run</code> (Note: This is not recommended in production)</li>
</ul>
<h3 id='advanced-usage-debugging-tips-writing-unit-tests'>Writing Unit Tests</h3>
<p>It is always a good idea to write unit tests for your jigs. We recommend using a framework like <code>mocha</code> or <code>jest</code>, and running your tests using the mockchain. The mockchain will be faster and will isolate your Jig logic from any network errors.</p>
<h3 id='advanced-usage-debugging-tips-too-long-mempool-chain'>too-long-mempool-chain</h3>
<p>If you see a <code>too-long-mempool-chain</code> error, it means that you&#39;ve hit a BSV network limitation. Today, only 25 transactions may be chained together in each Bitcoin block, and because of how Run works, you are likely to hit this in one of two ways:</p>

<ol>
<li>You update a jig 25 times in a ~10 minute block window</li>
<li>You create ~250 separate jigs in a ~10 minute block window using the same purse</li>
</ol>

<p>For #1, our best advice is to see if you can rearchitect your Jigs to avoid this case. We will provide a built-in solution in the future to avoid this limit.</p>

<p>For #2, we recommend switching between purses. Run automatically splits your UTXOs into 10 pieces, so you usually will be able to make over 200 transactions per block for each purse. You can increase this limit by setting <code>run.purse.splits = 100</code>.</p>
<h3 id='advanced-usage-debugging-tips-getting-help'>Getting Help</h3>
<p>Please reach out to @niv in the BSV slack channels. We are happy to help you debug and fix any issues you encounter. If you can, see if you can reproduce the issue in the browser using <code>getting_started.html</code>.</p>
<h2 id='advanced-usage-private-properties'>Private Properties</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Dragon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">_numberOfCrashLandings</span> <span class="o">=</span> <span class="mi">88</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">InsurancePolicy</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">dragon</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Throws an error !</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">dragon</span><span class="p">.</span><span class="nx">_numberOfCrashLandings</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">chargeMoreMoney</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Jigs may contain private variables and private methods. Private properties are available only within the Jig itself, and by using them, you may precisely control the interface that users and other jigs interact with. Simply prefix your properties with an understore. Run enforces it as a validation rule for Jigs.</p>

<p>There are a few rules to learn. Private variables may only be read inside a jig from one of its methods. If another kind of class attempts to read a private variable, Run will throw an error. Private variables may however be read externally in non-jig code, for example in the web Console. You can use that ability to help you debug and check the values of private properties while you&#39;re developing your app.</p>

<p>Private methods are similar. They may only be called as helper methods from within the same jig or by another jig of the same class. However, unlike private variables, you cannot call a private method externally in the web Console. If you think about, that makes sense, because calling a private method externally would execute code with unintended consequences. Run keeps you safe.</p>

<aside class="warning">
<b>Warning:</b> Private properties are not encrypted. They are an <em>access control</em> feature, not a user privacy feature.
</aside>
<h2 id='advanced-usage-class-properties'>Class Properties</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">DigitalPet</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span> <span class="p">}</span>

<span class="nx">DigitalPet</span><span class="p">.</span><span class="nx">author</span> <span class="o">=</span> <span class="s1">'Maximus'</span>
<span class="nx">DigitalPet</span><span class="p">.</span><span class="nx">license</span> <span class="o">=</span> <span class="s1">'MIT'</span>
<span class="nx">DigitalPet</span><span class="p">.</span><span class="nx">icon</span> <span class="o">=</span> <span class="p">{</span> <span class="na">emoji</span><span class="p">:</span> <span class="s1">'üêâ'</span> <span class="p">}</span>

<span class="nx">run</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">DigitalPet</span><span class="p">)</span>
</code></pre>
<p>Classes and functions may have static properties as metadata. These properties are stored on-chain with the code definition itself when the code is uploaded. Any later downloads of that code will have these properties set. Class property values may be any type that Run can serialize, including basic data types, jigs, and other classes or functions. Here are some recommended conventions:</p>

<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>author</code></td>
<td>string</td>
<td>Name of the class&#39;s creator</td>
</tr>
<tr>
<td><code>license</code></td>
<td>string</td>
<td>License for the code</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>object { emoji: string }</td>
<td>Icon to identify the class in block explorers. The <code>emoji</code> property should be a single emoji character.</td>
</tr>
<tr>
<td><code>deps</code></td>
<td>object</td>
<td>Dependencies that are loaded as globals into the code sandbox.</td>
</tr>
</tbody></table>

<p>When code is deployed, Run will set the <code>origin</code>, <code>location</code>, and <code>owner</code> properties on the class.</p>
<h2 id='advanced-usage-checking-the-caller'>Checking the Caller</h2>
<blockquote>
<p>Storing the parent jig</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Child</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nx">caller</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<blockquote>
<p>Enforcing a method may only be called by certain classes</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Database</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">rootUser</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">rootUser</span> <span class="o">=</span> <span class="nx">rootUser</span>
  <span class="p">}</span>

  <span class="nx">deleteAll</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">caller</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">rootUser</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'only the root user may delete the database'</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">User</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">deleteDatabase</span><span class="p">(</span><span class="nx">database</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">database</span><span class="p">.</span><span class="nx">deleteAll</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Within Jig code, there is a special <code>caller</code> property that is available. This property is the jig that called this jig&#39;s methods and <code>null</code> if the jig&#39;s method was invoked from application code.</p>

<p>You can use <code>caller</code> to keep track of where a jig came from by storing the parent jig inside of a child jig. You can also enforce that a child jig is created by a specific parent, or enforce that certain methods can only be called by certain jigs.</p>
<h2 id='advanced-usage-storing-classes'>Storing Classes</h2>
<blockquote>
<p>Comparing a class against a dynamic set</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Person</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">allowed</span> <span class="o">=</span> <span class="p">[]</span> <span class="p">}</span>

  <span class="nx">allow</span><span class="p">(</span><span class="nx">ItemClass</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">allowed</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ItemClass</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">wear</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">allowed</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">constructor</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">item</span> <span class="o">=</span> <span class="nx">item</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<p>Jigs may store other classes and functions as properties inside themselves and also accept code as arguments to their methods. This is useful, for example, to define an official list of supported classes used in a game. It may also be used to create dynamic jig factories, and even to upgrade the behavior of a class after it is written. When code is passed or stored for the first time, it will be automatically deployed and assigned an <code>owner</code>. Code is always owned by someone.</p>
<h2 id='advanced-usage-class-presets'>Class Presets</h2><pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Dragon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">set</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// In Node.js or the browser, upload the class via `run.deploy` and write down its origin.</span>
<span class="c1">// Then save it onto the class for the appropriate Bitcoin network before distributing.</span>

<span class="nx">Dragon</span><span class="p">.</span><span class="nx">originMainnet</span> <span class="o">=</span> <span class="s1">'bee45c75c37a289517f33ebfa051601c9610ccc56fbddfbabc44413db5b0bc1b_o1'</span>
</code></pre>
<p>In addition to downloading code from the blockchain, Jig classes may be shared with others in libraries. To share a Jig class, first, upload its code manually to each Bitcoin network you wish to support. Then set the following static properties on the class itself before distributing it. Run will automatically use the origins and locations on the appropriate network and not re-deploy the class.</p>

<table><thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td><code>originMainnet</code></td>
<td>string</td>
<td>Mainnet origin for the uploaded class</td>
</tr>
<tr>
<td><code>originTestnet</code></td>
<td>string</td>
<td>Testnet origin for the uploaded class</td>
</tr>
<tr>
<td><code>originStn</code></td>
<td>string</td>
<td>STN origin for the uploaded class</td>
</tr>
<tr>
<td><code>originMocknet</code></td>
<td>string</td>
<td>Mocknet origin for the uploaded class</td>
</tr>
<tr>
<td><code>locationMainnet</code></td>
<td>string</td>
<td>Mainnet location for the uploaded class</td>
</tr>
<tr>
<td><code>locationTestnet</code></td>
<td>string</td>
<td>Testnet location for the uploaded class</td>
</tr>
<tr>
<td><code>locationStn</code></td>
<td>string</td>
<td>STN location for the uploaded class</td>
</tr>
<tr>
<td><code>locationMocknet</code></td>
<td>string</td>
<td>Mocknet location for the uploaded class</td>
</tr>
<tr>
<td><code>ownerMainnet</code></td>
<td>?string</td>
<td>Optional mainnet owner pubkey for the uploaded class</td>
</tr>
<tr>
<td><code>ownerTestnet</code></td>
<td>?string</td>
<td>Optional testnet owner pubkey for the uploaded class</td>
</tr>
<tr>
<td><code>ownerStn</code></td>
<td>?string</td>
<td>Optional STN owner pubkey for the uploaded class</td>
</tr>
<tr>
<td><code>ownerMocknet</code></td>
<td>?string</td>
<td>Optional mocknet owner pubkey for the uploaded class</td>
</tr>
</tbody></table>

<aside class="warning">
<b>Warning:</b> Run assumes that the class code matches the code that is stored on the blockchain. Only use class libraries from people you trust.
</aside>
<h2 id='advanced-usage-batch-transactions'>Batch Transactions</h2><pre class="highlight javascript tab-javascript"><code><span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="nx">begin</span><span class="p">()</span>
<span class="kr">const</span> <span class="nx">jig</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">CustomJig</span><span class="p">()</span>
<span class="nx">jig</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">to</span><span class="p">)</span>
<span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
</code></pre>
<p>Multiple actions may be batched together into a single atomic Bitcoin transaction. In addition to making these actions all-or-nothing, it also reduces the fees. Any number of updates may be batched together from different jigs. Call <code>run.transaction.begin()</code> before performing updates and <code>run.transaction.end()</code> after. These may also be nested, and when the final <code>end()</code> is called, the transaction will be published on-chain.</p>
<h2 id='advanced-usage-atomic-swaps'>Atomic Swaps</h2>
<blockquote>
<p>Atomically swapping two items with different owners</p>

<p>Machine 1</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">const</span> <span class="nx">myWeapon</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">weaponLocation</span><span class="p">)</span>
<span class="kr">const</span> <span class="nx">theirArmor</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">armorLocation</span><span class="p">)</span>

<span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="nx">begin</span><span class="p">()</span>

<span class="kr">const</span> <span class="nx">me</span> <span class="o">=</span> <span class="nx">myWeapon</span><span class="p">.</span><span class="nx">owner</span>
<span class="nx">myWeapon</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">theirArmor</span><span class="p">.</span><span class="nx">owner</span><span class="p">)</span>
<span class="nx">theirArmor</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">me</span><span class="p">)</span>

<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="nx">pay</span><span class="p">()</span>
<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="nx">sign</span><span class="p">()</span>

<span class="kr">const</span> <span class="nx">tx</span> <span class="o">=</span> <span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="kr">export</span><span class="p">()</span>
</code></pre>
<blockquote>
<p>Machine 2</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="kr">import</span><span class="p">(</span><span class="nx">tx</span><span class="p">)</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// TODO: Inspect the transaction to be sure it atomically swaps</span>
<span class="p">}</span>
<span class="nx">await</span> <span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="nx">sign</span><span class="p">()</span>

<span class="nx">run</span><span class="p">.</span><span class="nx">transaction</span><span class="p">.</span><span class="nx">end</span><span class="p">()</span>
</code></pre>
<p>Run supports atomically updating jigs with different owners using the Transaction API. One application for this is atomic swaps, where two jigs owned by different users are exchanged in a single transaction.</p>

<p>The general process for an atomic swap is first for one user to start a Run transaction by calling <code>run.transaction.begin()</code>. Then, this user performs all updates, including calling methods on jigs they don&#39;t own. Run allows this user to build the transaction although they won&#39;t be able to add all of the signatures. Finally, this first user pays for the transaction and sign their jigs. The transaction is complete, and must now be handed to other parties for them to add their signatures. To do that, the first user calls <code>run.transaction.export()</code> to get the bsv transaction and sends it to the other parties via a separate channel.</p>

<p>The other party then calls <code>run.transaction.import()</code> to load the transaction they received. They may then want to check what the transaction does by inspecting <code>run.transaction.actions</code>. If they approve, then they may call <code>run.transaction.sign()</code> to add signatuers for their jigs. This process may continue for additional parties. When all signatures are collected, the last user calls <code>run.transaction.end()</code> to broadcast the transaction to the Bitcoin network.</p>

<p>The Transaction API may also be used to simulate state channels and propose changes to other jigs. See the <a href="#api-reference-transaction">Transaction API</a> for more information.</p>
<h2 id='advanced-usage-running-arbitrary-code'>Running Arbitrary Code</h2>
<blockquote>
<p>Loading a helper class</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Preconditions</span> <span class="p">{</span>
  <span class="kr">static</span> <span class="nx">checkArgument</span><span class="p">(</span><span class="nx">check</span><span class="p">)</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">check</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">()</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">PositiveNumber</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">init</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">checkArgument</span><span class="p">(</span><span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">PositiveNumber</span><span class="p">.</span><span class="nx">deps</span> <span class="o">=</span> <span class="p">{</span> <span class="na">$</span><span class="p">:</span> <span class="nx">Preconditions</span> <span class="p">}</span>
</code></pre>
<p>Run supports running arbitrary code from the blockchain and not just jigs. Currently, arbitrary code must be uploaded as either classes or functions. Like jigs, arbitrary code also runs in a sandbox environment but it does not sync with the blockchain. Therefore, it should not save state. One popular use of arbitrary code is to write helper libraries for jigs like big integer math or cryptographic hashing. Another use case is to upgrade behavior of Jig classes. See <a href="#upgrading-jigs">Upgrading Jigs</a> for more details.</p>

<aside class="notice">
<b>Note:</b> Unlike Jigs, arguments that are passed into arbitrary code functions may expose your global scope. Be careful.
</aside>
<h2 id='advanced-usage-upgrading-jigs'>Upgrading Jigs</h2>
<blockquote>
<p>Method 1: Reissuing Jigs</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">OriginalJig</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">f</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">3</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kr">class</span> <span class="nx">UpgradedJig</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span> 
  <span class="nx">init</span><span class="p">(</span><span class="nx">original</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">original</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">!==</span> <span class="nx">OriginalJig</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">'unexpected jig'</span><span class="p">)</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">original</span> <span class="o">=</span> <span class="nx">original</span>
  <span class="p">}</span>
  <span class="nx">f</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">4</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre>
<blockquote>
<p>Method 2: Replacing Behavior</p>
</blockquote>
<pre class="highlight javascript tab-javascript"><code><span class="kr">class</span> <span class="nx">Weapon</span> <span class="kr">extends</span> <span class="nx">Jig</span> <span class="p">{</span>
  <span class="nx">setAttackBehavior</span><span class="p">(</span><span class="nx">attackFunction</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">attackFunction</span> <span class="o">=</span> <span class="nx">attackFunction</span>
  <span class="p">}</span>

  <span class="nx">attack</span><span class="p">(</span><span class="nx">player</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">attackFunction</span><span class="p">(</span><span class="nx">player</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">weapon</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Weapon</span><span class="p">()</span>

<span class="kd">function</span> <span class="nx">attackPlayer</span><span class="p">(</span><span class="nx">player</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">player</span><span class="p">.</span><span class="nx">doDamage</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">weapon</span><span class="p">.</span><span class="nx">setAttackBehavior</span><span class="p">(</span><span class="nx">attackPlayer</span><span class="p">)</span>
<span class="nx">weapon</span><span class="p">.</span><span class="nx">attack</span><span class="p">(</span><span class="nx">player</span><span class="p">)</span>
</code></pre>
<p>By default, jig classes are not upgradable. However, you may simulate upgradability by creating a new jig that wraps the old one and adds the new behavior. You may also simulate upgradability by storing behavior in classes. These are both demonstrated on the right. There will be additional ways to upgrade classes in the future.</p>
