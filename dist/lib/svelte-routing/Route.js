/* src/lib/svelte-routing/Route.svelte generated by Svelte v3.18.1 */
import { SvelteComponentDev, assign, check_outros, component_subscribe, create_component, create_slot, destroy_component, detach_dev, dispatch_dev, empty, exclude_internal_props, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, group_outros, init, insert_dev, mount_component, safe_not_equal, transition_in, transition_out, validate_store } from "/web_modules/svelte/internal.js";
import { getContext, onDestroy } from "/web_modules/svelte.js";
import { ROUTER, LOCATION } from "./contexts.js";
const file = "src/lib/svelte-routing/Route.svelte";

const get_default_slot_changes = dirty => ({
  params: dirty &
  /*routeParams*/
  2,
  location: dirty &
  /*$location*/
  16
});

const get_default_slot_context = ctx => ({
  params:
  /*routeParams*/
  ctx[1],
  location:
  /*$location*/
  ctx[4]
}); // (40:0) {#if $activeRoute !== null && $activeRoute.route === route}


function create_if_block(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (
    /*component*/
    ctx[0] !== null) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        }

        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching) detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(40:0) {#if $activeRoute !== null && $activeRoute.route === route}",
    ctx
  });
  return block;
} // (43:2) {:else}


function create_else_block(ctx) {
  let current;
  const default_slot_template =
  /*$$slots*/
  ctx[13].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[12], get_default_slot_context);
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }

      current = true;
    },
    p: function update(ctx, dirty) {
      if (default_slot && default_slot.p && dirty &
      /*$$scope, routeParams, $location*/
      4114) {
        default_slot.p(get_slot_context(default_slot_template, ctx,
        /*$$scope*/
        ctx[12], get_default_slot_context), get_slot_changes(default_slot_template,
        /*$$scope*/
        ctx[12], dirty, get_default_slot_changes));
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(43:2) {:else}",
    ctx
  });
  return block;
} // (41:2) {#if component !== null}


function create_if_block_1(ctx) {
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [{
    location:
    /*$location*/
    ctx[4]
  },
  /*routeParams*/
  ctx[1],
  /*routeProps*/
  ctx[2]];
  var switch_value =
  /*component*/
  ctx[0];

  function switch_props(ctx) {
    let switch_instance_props = {};

    for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
      switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    }

    return {
      props: switch_instance_props,
      $$inline: true
    };
  }

  if (switch_value) {
    var switch_instance = new switch_value(switch_props(ctx));
  }

  const block = {
    c: function create() {
      if (switch_instance) create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance) {
        mount_component(switch_instance, target, anchor);
      }

      insert_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx, dirty) {
      const switch_instance_changes = dirty &
      /*$location, routeParams, routeProps*/
      22 ? get_spread_update(switch_instance_spread_levels, [dirty &
      /*$location*/
      16 && {
        location:
        /*$location*/
        ctx[4]
      }, dirty &
      /*routeParams*/
      2 && get_spread_object(
      /*routeParams*/
      ctx[1]), dirty &
      /*routeProps*/
      4 && get_spread_object(
      /*routeProps*/
      ctx[2])]) : {};

      if (switch_value !== (switch_value =
      /*component*/
      ctx[0])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }

        if (switch_value) {
          switch_instance = new switch_value(switch_props(ctx));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current) return;
      if (switch_instance) transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance) transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) detach_dev(switch_instance_anchor);
      if (switch_instance) destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(41:2) {#if component !== null}",
    ctx
  });
  return block;
}

function create_fragment(ctx) {
  let if_block_anchor;
  let current;
  let if_block =
  /*$activeRoute*/
  ctx[3] !== null &&
  /*$activeRoute*/
  ctx[3].route ===
  /*route*/
  ctx[7] && create_if_block(ctx);
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx, [dirty]) {
      if (
      /*$activeRoute*/
      ctx[3] !== null &&
      /*$activeRoute*/
      ctx[3].route ===
      /*route*/
      ctx[7]) {
        if (if_block) {
          if_block.p(ctx, dirty);
          transition_in(if_block, 1);
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block) if_block.d(detaching);
      if (detaching) detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  let $activeRoute;
  let $location;
  let {
    path = ""
  } = $$props;
  let {
    component = null
  } = $$props;
  const {
    registerRoute,
    unregisterRoute,
    activeRoute
  } = getContext(ROUTER);
  validate_store(activeRoute, "activeRoute");
  component_subscribe($$self, activeRoute, value => $$invalidate(3, $activeRoute = value));
  const location = getContext(LOCATION);
  validate_store(location, "location");
  component_subscribe($$self, location, value => $$invalidate(4, $location = value));
  const route = {
    path,
    // If no path prop is given, this Route will act as the default Route
    // that is rendered if no other Route in the Router is a match.
    default: path === ""
  };
  let routeParams = {};
  let routeProps = {};
  registerRoute(route); // There is no need to unregister Routes in SSR since it will all be
  // thrown away anyway.

  if (typeof window !== "undefined") {
    onDestroy(() => {
      unregisterRoute(route);
    });
  }

  let {
    $$slots = {},
    $$scope
  } = $$props;

  $$self.$set = $$new_props => {
    $$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("path" in $$new_props) $$invalidate(8, path = $$new_props.path);
    if ("component" in $$new_props) $$invalidate(0, component = $$new_props.component);
    if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
  };

  $$self.$capture_state = () => {
    return {
      path,
      component,
      routeParams,
      routeProps,
      $activeRoute,
      $location
    };
  };

  $$self.$inject_state = $$new_props => {
    $$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    if ("path" in $$props) $$invalidate(8, path = $$new_props.path);
    if ("component" in $$props) $$invalidate(0, component = $$new_props.component);
    if ("routeParams" in $$props) $$invalidate(1, routeParams = $$new_props.routeParams);
    if ("routeProps" in $$props) $$invalidate(2, routeProps = $$new_props.routeProps);
    if ("$activeRoute" in $$props) activeRoute.set($activeRoute = $$new_props.$activeRoute);
    if ("$location" in $$props) location.set($location = $$new_props.$location);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*$activeRoute*/
    8) {
      $: if ($activeRoute && $activeRoute.route === route) {
        $$invalidate(1, routeParams = $activeRoute.params);
      }
    }

    $: {
      const {
        path,
        component,
        ...rest
      } = $$props;
      $$invalidate(2, routeProps = rest);
    }
  };

  $$props = exclude_internal_props($$props);
  return [component, routeParams, routeProps, $activeRoute, $location, activeRoute, location, route, path, registerRoute, unregisterRoute, $$props, $$scope, $$slots];
}

class Route extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      path: 8,
      component: 0
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Route",
      options,
      id: create_fragment.name
    });
  }

  get path() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set path(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  get component() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set component(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

export default Route;